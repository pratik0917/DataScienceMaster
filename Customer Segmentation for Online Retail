#Task 1 - Data Loading 
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# code starts here
df = pd.read_csv(path)

df.dropna(inplace=True)

df=df[df['Country']=='United Kingdom']
df['Return']=df['InvoiceNo'].apply(lambda x: (x[0]=='C'))
df['Purchase']=df['Return'].apply(lambda x: 0 if x==True else 1)
print(df.head(10))
# code ends here

#Task 2 - Create customer-level dataset
# code starts here
customers=pd.DataFrame(df['CustomerID'].unique(),columns=['CustomerID'],dtype = int)
print(customers)
df['Recency'] = pd.to_datetime("2011-12-10") - pd.to_datetime(df['InvoiceDate'])
df['Recency'] = df.Recency.dt.days
print(df.head(2))
temp=df[df['Purchase']==1]
recency=temp.groupby('CustomerID',as_index=False).agg('min')
print(recency.head(2))
customers=customers.merge(recency[['CustomerID','Recency']],on='CustomerID')
# code ends here

#Task 3 - Calculate the frequency of Purchase
# code stars here
temp_1=df[['CustomerID','InvoiceNo','Purchase']]
temp_1.drop_duplicates(subset = ['InvoiceNo'],inplace=True)
annual_invoice=temp_1.groupby('CustomerID',as_index=False).agg('sum')
annual_invoice.rename(columns={"Purchase": "Frequency"},inplace=True)
customers=customers.merge(annual_invoice,on='CustomerID')
# code ends here

#Task 4 - Calculate the Monetary
# code starts here
df['Amount']=df['Quantity']*df['UnitPrice']
annual_sales=df.groupby('CustomerID',as_index= False).sum()
annual_sales.rename(columns={'Amount':'monetary'},inplace=True)
customers=customers.merge(annual_sales[['CustomerID','monetary']],on='CustomerID')
# code ends here

#Task 5 - Data preprocessing 
# code ends here
customers['monetary']=np.where(customers['monetary']<0,0,customers['monetary'])
customers['Recency_log']=np.log(customers['Recency']+0.1)
customers['Frequency_log']=np.log(customers['Frequency'])
customers['Monetary_log']=np.log(customers['monetary'])
# code ends here

#Task 6 - Elbow method to find optimal number of clusters
# import packages
from sklearn.cluster import KMeans


# code starts here
customers['Monetary_log']=np.log(customers['monetary']+0.1)
dist =[]
print(customers.isnull().sum())
for k in range(1,10):
    km=KMeans(n_clusters=k,init='k-means++', max_iter=300, n_init=10, random_state=0)
    km.fit(customers)
    dist.append(km.inertia_)

# code ends here


# Code starts here

# initialize KMeans object
cluster = KMeans(n_clusters=3, init='k-means++', max_iter=300, n_init=10, random_state=0)

# create 'cluster' column
customers['cluster'] = cluster.fit_predict(customers.iloc[:,1:7])

# plot the cluster





customers.plot.scatter(x= 'Frequency_log', y= 'Monetary_log', c='cluster', colormap='viridis')
plt.show()

# Code ends here
